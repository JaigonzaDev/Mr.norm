import os
from pathlib import Path
from google import genai
from google.genai.errors import APIError


def refactor_file_content(file_path: Path, prompt: str) -> str:
    """
    Lee el contenido del archivo, llama a la API de Gemini para editarlo,
    y devuelve el contenido editado.
    """
    print(f"  -> Procesando archivo: {file_path.name}")
    
    try:
        content = file_path.read_text(encoding='utf-8')
    except Exception as e:
        print(f"  ‚ùå ERROR al leer {file_path.name}: {e}")
        return None

    system_instruction = (
        "ERES UN REFORMATEADOR DE C√ìDIGO EXTREMADAMENTE ESTRICTO. Tu tarea es reescribir "
        "el c√≥digo fuente proporcionado para que cumpla "
        "con *todas y cada una* de las siguientes reglas de formato y estilo, que son obligatorias.\n"
        
        "REGLAS DE FORMATO Y ESTILO (OBLIGATORIAS):\n"
        "1. Indentaci√≥n: Tabulaciones de 4 espacios (el car√°cter TAB, no 4 espacios).\n"
        "2. Longitud de Funci√≥n: M√°ximo 25 l√≠neas por funci√≥n (excluyendo llaves).\n"
        "3. Ancho de L√≠nea: M√°ximo 80 columnas (incluyendo comentarios). Advertencia: una tabulaci√≥n no cuenta como una columna.\n"
        "4. Separaci√≥n de Funciones: Una l√≠nea vac√≠a entre funciones. Comentarios/instrucciones de preprocesador pueden ir justo encima.\n"
        "5. Instrucciones: Una instrucci√≥n por l√≠nea.\n"
        "6. L√≠neas Vac√≠as: Deben estar vac√≠as (sin espacios/tabulaciones).\n"
        "7. Espacios Finales: Una l√≠nea no puede terminar con espacios o tabulaciones.\n"
        "8. Espacios Consecutivos: No se permiten dos espacios consecutivos.\n"
        "9. L√≠nea Nueva con Llaves: Comenzar una nueva l√≠nea despu√©s de cada llave de apertura '{' o cierre '}' o despu√©s de una estructura de control.\n"
        "10. Comas/Punto y Coma: Cada ',' o ';' debe ser seguido por un espacio, salvo que sea el final de una l√≠nea.\n"
        "11. Operadores/Operandos: Cada operador u operando debe estar separado por un (y solo un) espacio.\n"
        "12. Palabras Clave de C: Cada palabra clave de C debe ir seguida de un espacio, excepto tipos (`int`, `char`, etc.) y `sizeof`.\n"
        "13. Declaraci√≥n de Variables: Indentada en la misma columna dentro de su scope.\n"
        "14. Punteros: Asteriscos '*' pegados a los nombres de las variables.\n"
        "15. Una Declaraci√≥n por L√≠nea: Una sola declaraci√≥n de variable por l√≠nea.\n"
        "16. Inicializaci√≥n: Declaraci√≥n e inicializaci√≥n no pueden estar en la misma l√≠nea (excepto globales/est√°ticas/constantes).\n"
        "17. Ubicaci√≥n de Declaraciones: Al principio de una funci√≥n.\n"
        "18. L√≠nea Vac√≠a en Funci√≥n: Una l√≠nea vac√≠a entre declaraciones de variables y el resto de la funci√≥n. No se permiten otras l√≠neas vac√≠as dentro de la funci√≥n.\n"
        "19. Asignaciones M√∫ltiples: Completamente prohibidas.\n"
        "20. Salto de L√≠nea en Instrucci√≥n: Si se a√±ade una l√≠nea nueva despu√©s de una instrucci√≥n, se debe agregar una indentaci√≥n con llaves o un operador de asignaci√≥n. Los operadores deben estar al principio de una l√≠nea.\n"
        "21. Estructuras de Control: Deben tener llaves, salvo que contengan una sola l√≠nea.\n"
        "22. Llaves de Funci√≥n/Estructura: Las llaves que siguen a funciones, declaradores o estructuras de control deben estar **precedidas y seguidas por una nueva l√≠nea**.\n"
        
        "REGLAS DE FUNCIONES Y COMENTARIOS:\n"
        "23. Par√°metros: M√°ximo 4 par√°metros por funci√≥n.\n"
        "24. Funciones sin Argumentos: Prototipadas con la palabra 'void' como argumento.\n"
        "25. Nombres de Par√°metros: Los par√°metros en los prototipos deben tener nombre.\n"
        "26. Declaraci√≥n de Variables: M√°ximo 5 variables por funci√≥n.\n"
        "27. Retorno: El retorno de una funci√≥n debe estar entre par√©ntesis.\n"
        "28. Separaci√≥n de Tipo/Nombre: Una sola tabulaci√≥n entre el tipo de retorno de la funci√≥n y su nombre.\n"
        "29. Comentarios en Funciones: Los comentarios no son permitidos en el cuerpo de las funciones, solo en el encabezado antes de la propia funcion.\n"
        "30. Idioma de Comentarios: **Tus comentarios deben estar en ingl√©s** y deben ser √∫tiles.\n"
        
        "El c√≥digo que devuelvas debe ser SOLAMENTE el c√≥digo fuente completo y refactorizado. "
        "NO incluyas explicaciones, encabezados, comentarios o bloques de markdown (```).\n\n"
    )
    
    try:
        client = genai.Client()
        
        full_prompt = (
            system_instruction +
            f"REGLA ADICIONAL O √âNFASIS: {prompt}\n\nAqu√≠ est√° el c√≥digo fuente a refactorizar. Aseg√∫rate de que **todos los comentarios est√©n en ingl√©s** y que se utilice el **car√°cter de tabulaci√≥n** para la indentaci√≥n:\n\n{content}"
        )

        response = client.models.generate_content(
            model='gemini-2.5-flash', 
            contents=[
                full_prompt
            ]
        )
        
        edited_code = response.text.strip()
        if edited_code.startswith("```") and edited_code.endswith("```"):
            lines = edited_code.split('\n')
            if len(lines) > 2:
                edited_code = '\n'.join(lines[1:-1]).strip()
        
        return edited_code

    except APIError as e:
        print(f"  ‚ùå ERROR de API para {file_path.name}: {e}")
        return None
    except Exception as e:
        print(f"  ‚ùå ERROR inesperado para {file_path.name}: {e}")
        return None

# --------------------------------------------------------------------------------

def process_directory(directory_path: str, file_extension: str, refactor_prompt: str):
    """
    Recorre el directorio y aplica la refactorizaci√≥n a todos los archivos que coincidan con la extensi√≥n.
    """
    
    target_dir = Path(directory_path)
    if not target_dir.is_dir():
        print(f"‚ùå Error: La ruta '{directory_path}' no es un directorio v√°lido.")
        return

    print(f"üöÄ Iniciando refactorizaci√≥n en: {target_dir}")
    print(f"üîç Buscando archivos con extensi√≥n: *.{file_extension}\n")
    
    for file_path in target_dir.rglob(f"*.{file_extension}"):
        
        if file_path.is_file():
            
            edited_content = refactor_file_content(file_path, refactor_prompt)
            
            if edited_content and edited_content != file_path.read_text(encoding='utf-8'):
                
                try:
                    file_path.write_text(edited_content, encoding='utf-8')
                    print(f"  ‚úÖ Sobrescrito con √©xito.")
                except Exception as e:
                    print(f"  ‚ùå ERROR al escribir en {file_path.name}: {e}")
            elif edited_content:
                print(f"  ‚ÑπÔ∏è Sin cambios significativos detectados.")
            else:
                print(f"  ‚ö†Ô∏è Archivo omitido debido a un error de procesamiento.")
    
    print("\nüèÅ Proceso de refactorizaci√≥n completado.")


# --------------------------------------------------------------------------------

# --- CONFIGURACI√ìN PRINCIPAL ---
if __name__ == "__main__":
    
    TARGET_DIRECTORY = "./refactorizar" 
    FILE_EXTENSION = "c" 
    REFACTOR_PROMPT = (
        "Enf√≥cate estrictamente en las reglas de las llaves, la indentaci√≥n por tabulaci√≥n "
        "y la longitud m√°xima de 25 l√≠neas por funci√≥n. Aseg√∫rate de que el retorno est√© entre par√©ntesis."
    )
    
    if 'GEMINI_API_KEY' not in os.environ:
        print("‚ùå Por favor, establece la variable de entorno GEMINI_API_KEY antes de ejecutar el script.")
    else:
        process_directory(TARGET_DIRECTORY, FILE_EXTENSION, REFACTOR_PROMPT)